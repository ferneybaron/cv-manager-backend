plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.0'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'org.hibernate.orm' version '6.2.2.Final'
	id 'org.graalvm.buildtools.native' version '0.9.20'
	id "org.sonarqube" version "3.5.0.2730"
	id 'jacoco'
}

group = 'com.fbaron'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'
targetCompatibility = '17'


configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}



dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-graphql'
	implementation "org.springframework.boot:spring-boot-starter-validation:${validationVersion}"
	implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${openapiUIVersion}"

	// Spring Data
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'

	//Database
	runtimeOnly 'com.h2database:h2'
	implementation "org.postgresql:postgresql:${postgresqlVersion}"

	//Tools
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	implementation "org.mapstruct:mapstruct:${mapstructVersion}"
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
	implementation "com.google.code.gson:gson:${gsonVersion}"

	//Test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.springframework.graphql:spring-graphql-test'
}


tasks.named('test') {
	useJUnitPlatform()
}

sonar {
	properties {
		property "sonar.projectKey", "${sonar.projectKey}"
		property "sonar.projectName", "${sonar.projectName}"
		property "sonar.exclusions", "**/model/**, **/dto/**, **/entity/**, **/mapper/**, **/Application.class"
		property "sonar.jacoco.reportPaths", "build/jacoco/test.exec" // allow to automatically run and read reports for coverage
		property "sonar.coverage.jacoco.xmlReportPaths", "build/customJacocoReportDir/test/jacocoTestReport.xml"
	}
}

jacoco {
	toolVersion = "${jacoco.toolVersion}"
	reportsDirectory = layout.buildDirectory.dir("${jacoco.reportsDirectory}")
}

jacocoTestReport {
	reports {
		xml.required = true
		csv.required = true
		html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'**/model/**',
					'**/dto/**',
					'**/entity/**',
					'**/mapper/**',
					'**/Application.class'
			])
		}))
	}
}

test.finalizedBy jacocoTestReport

